const INTEGRITY_CHECKSUM="65d33ca82955e1c5928aed19d1bdf3f9",bypassHeaderName="x-msw-bypass";let clients={};function serializeHeaders(e){const s={};return e.forEach(((e,t)=>{s[t]=s[t]?[].concat(s[t]).concat(e):e})),s}function sendToClient(e,s){return new Promise(((t,r)=>{const n=new MessageChannel;n.port1.onmessage=e=>{e.data&&e.data.error?r(e.data.error):t(e.data)},e.postMessage(JSON.stringify(s),[n.port2])}))}function createResponse(e){return new Response(e.payload.body,{...e.payload,headers:e.payload.headers})}function ensureKeys(e,s){return Object.keys(s).reduce(((t,r)=>(e.includes(r)&&(t[r]=s[r]),t)),{})}self.addEventListener("install",(function(){return self.skipWaiting()})),self.addEventListener("activate",(async function(e){return self.clients.claim()})),self.addEventListener("message",(async function(e){const s=e.source.id,t=await e.currentTarget.clients.get(s),r=await self.clients.matchAll(),n=r.map((e=>e.id));switch(e.data){case"KEEPALIVE_REQUEST":sendToClient(t,{type:"KEEPALIVE_RESPONSE"});break;case"INTEGRITY_CHECK_REQUEST":sendToClient(t,{type:"INTEGRITY_CHECK_RESPONSE",payload:INTEGRITY_CHECKSUM});break;case"MOCK_ACTIVATE":clients=ensureKeys(n,clients),clients[s]=!0,sendToClient(t,{type:"MOCKING_ENABLED",payload:!0});break;case"MOCK_DEACTIVATE":clients=ensureKeys(n,clients),clients[s]=!1;break;case"CLIENT_CLOSED":0===r.filter((e=>e.id!==s)).length&&self.registration.unregister()}})),self.addEventListener("fetch",(function(e){const{clientId:s,request:t}=e,r=t.clone(),n=()=>fetch(r);"navigate"!==t.mode&&clients[s]&&("only-if-cached"===t.cache&&"same-origin"!==t.mode||e.respondWith(new Promise((async(a,o)=>{const i=await e.target.clients.get(s);if(!i)return a(n());if("true"===r.headers.get("x-msw-bypass")){const e=serializeHeaders(r.headers);delete e["x-msw-bypass"];const s=new Request(r,{headers:new Headers(e)});return a(fetch(s))}const c=serializeHeaders(t.headers),d=await t.text(),l=await sendToClient(i,{type:"REQUEST",payload:{url:t.url,method:t.method,headers:c,cache:t.cache,mode:t.mode,credentials:t.credentials,destination:t.destination,integrity:t.integrity,redirect:t.redirect,referrer:t.referrer,referrerPolicy:t.referrerPolicy,body:d,bodyUsed:t.bodyUsed,keepalive:t.keepalive}});switch(l.type){case"MOCK_SUCCESS":setTimeout(a.bind(this,createResponse(l)),l.payload.delay);break;case"MOCK_NOT_FOUND":return a(n());case"NETWORK_ERROR":{const{name:e,message:s}=l.payload,t=new Error(s);return t.name=e,o(t)}case"INTERNAL_ERROR":{const e=JSON.parse(l.payload.body);return console.error(`[MSW] Request handler function for "%s %s" has thrown the following exception:\n\n${e.errorType}: ${e.message}\n(see more detailed error stack trace in the mocked response body)\n\nThis exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error.\nIf you wish to mock an error response, please refer to this guide: https://mswjs.io/docs/recipes/mocking-error-responses  `,t.method,t.url),a(createResponse(l))}}})).catch((e=>{console.error('[MSW] Failed to mock a "%s" request to "%s": %s',t.method,t.url,e)}))))}));